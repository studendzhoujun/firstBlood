#!/usr/bin/env node
var program = require('commander');
var mkdirp = require('mkdirp');
var path = require('path');
var fs = require('fs');
var readline = require('readline');
var sortedObject = require('sorted-object');
var colors = require('colors');
var exec = require('child_process').exec
console.log('hoo <1.0.4> starting.......'.inverse);
program
    .version('1.0.4')
    .option('-p, --package', 'update package')
    .option('-v, --version', 'list version')
    .option('-i, --init', 'init a project')
    .option('-d, --depends', 'install node_modules', depends)
    .option('-l, --listPkg', 'list package', listPkg)
    .parse(process.argv);
function depends() {
    console.log('install depends'.rainbow);
    exec('node -v && npm install', function (err, stdout, stderr) {
        console.log(stdout)
    })
}
function listPkg() {
    console.log(__dirname);
    console.log(process.cwd());
    var temPkg = require('../package.json');
    var pkg = require(process.cwd() + '/package.json');
    var temPkgD = temPkg.dependencies;
    var pkgD = pkg.dependencies;
    console.log(temPkg.name);
    console.log(pkg.name);
    for (var item in pkgD) {
        console.log(item.red + '-----'.rainbow + pkgD[item])
    }
}
if (program.init) {
    main();
}
if (program.package) {
    console.log('update package'.yellow)
    var temPkg = require('../package.json');
    var pkg = require(process.cwd() + '/package.json');
    var temPkgD = temPkg.dependencies;
    var pkgD = pkg.dependencies;
    for(var item in temPkgD){
        if(pkgD[item]){
            pkgD[item]=temPkgD[item];
        }
    }
    pkg.dependencies=pkgD;
    write(process.cwd() + '/package.json', JSON.stringify(pkg, null, 2) + '\n');
}
//main();
function main() {
    console.log('init program');
    var destinationPath = program.args.shift() || '.';
    var appName = createAppName(path.resolve(destinationPath)) || 'wap';
    emptyDirectory(destinationPath, function (empty) {
        if (empty) {
            createApplication(appName, destinationPath)
        } else {
            console.log(`directory ${appName} is here`)
            confirm(`directory ${appName} is not empty, Are you want to exit? [y/N]`.red, function (ok) {
                if (ok) {
                    //process.stdin.destroy();
                    console.log('exit')
                    process.stdin.destroy();
                } else {
                    console.log('going')

                }
            })
        }
    })
}
/**
 * 
 * @param {string} pathName 
 */
function createAppName(pathName) {
    return path.basename(pathName)
        .replace(/[^A-Za-z0-9\.()!~*'-]+/g, '-')
        .replace(/^[-_\.]+|-+$/g, '')
        .toLowerCase()
}

/**
 * Mkdir -p.
 *
 * @param {String} path
 * @param {Function} fn
 */

function mkdir(path, fn) {
    mkdirp(path, 0755, function (err) {
        if (err) throw err;
        console.log('   create: '.rainbow + path.green);
        fn && fn();
    });
}
/**
 * 
 * @param {string} app_name 
 * @param {string} path 
 */
function createApplication(app_name, path) {
    var wait = 4;

    console.log();
    function complete() {
        if (--wait) return;
        var prompt = launchedFromCmd() ? '>' : '$';

        console.log();
        console.log('   install dependencies:');
        console.log('     %s cd %s && npm install', prompt, path);
        console.log();
        console.log('   run the app:');

        if (launchedFromCmd()) {
            console.log('     %s SET DEBUG=%s:* & npm start', prompt, app_name);
        } else {
            console.log('     %s DEBUG=%s:* npm start', prompt, app_name);
        }

        console.log();
    }
    //copy模板里的内容
    var server = loadTemplate('js/server.js');
    var webpack = loadTemplate('js/webpack.config.js');
    var gulpfile = loadTemplate('js/gulpfile.js');
    var gitignore = loadTemplate('js/gitignore');
    var package = loadTemplate('js/package.json');
    //创建文件目录
    mkdir(path, function () {
        mkdir(path + '/src');
        mkdir(path + '/src/cart', function () {
            complete();
        });

        mkdir(path + '/src/core', function () {
            complete();
        });

        mkdir(path + '/src/u', function () {
            complete();
        });
        write(path + '/serve.js', server);
        write(path + '/webpack.config.js', webpack);
        write(path + '/gulpfile.js', gulpfile);
        write(path + '/.gitignore', gitignore);
        write(path + '/package.json', package);
        complete();
    });
}
/**
 * Determine if launched from cmd.exe
 */

function launchedFromCmd() {
    return process.platform === 'win32'
        && process.env._ === undefined;
}
/**
 * Check if the given directory `path` is empty.
 *
 * @param {String} path
 * @param {Function} fn
 */

function emptyDirectory(path, fn) {
    fs.readdir(path, function (err, files) {
        if (err && err.code !== 'ENOENT') throw err
        fn(!files || !files.length)
    })
}
/**
 * Prompt for confirmation on STDOUT/STDIN
 */

function confirm(msg, callback) {
    var rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
    });

    rl.question(msg, function (input) {
        rl.close();
        callback(/^y|yes|ok|true$/i.test(input));
    });
}
/**
 * Load template file.
 */

function loadTemplate(name) {
    return fs.readFileSync(path.join(__dirname, '..', 'temp', name), 'utf-8');
}
/**
 * echo str > path.
 *
 * @param {String} path
 * @param {String} str
 */

function write(path, str, mode) {
    fs.writeFileSync(path, str, { mode: mode || 0666 });
    console.log('   create: '.rainbow + path.green);
}
